@using LinkDotNet.KanbanBoard.Domain
@using System.ComponentModel.DataAnnotations
<style type="text/css">
    .add-goal-grid-container {
        display: grid;
        grid-template-columns: 1fr 1.5fr;
        grid-template-rows: repeat(3, 1fr);
        gap: 1px 1px;
        grid-template-areas:
                           "add-goal-title add-goal-title-value"
                           "add-goal-rank add-goal-rank-value"
                           "add-goal-deadline add-goal-deadline-value";
    }

    .add-goal-title { grid-area: add-goal-title; }

    .add-goal-title-value { grid-area: add-goal-title-value; }

    .add-goal-rank { grid-area: add-goal-rank; }

    .add-goal-rank-value { grid-area: add-goal-rank-value; }

    .add-goal-deadline { grid-area: add-goal-deadline; }

    .add-goal-deadline-value { grid-area: add-goal-deadline-value; }

    .add-goal-submit { float: right;
        flex: 1;
    }

    .subtasks {
        flex-wrap: wrap;
        flex-direction: column;
        margin-top: 10px;
    }

    .subtask-input { 
        box-sizing:content-box;
        width: 90%;
    }

    .add-goal-subtasks-table {
        display: flex;
        flex-wrap: wrap;
    }

    .subgoal-cell {
        box-sizing: border-box;
        flex-grow: 1;
        width: 100%;
        padding-bottom: 5px;
        overflow: hidden;
        list-style: none;
    }

    .subgoal-table-2cols > .subgoal-cell  { width: 50%; }
</style>
<EditForm Model="@_addGoalModel" OnValidSubmit="HandleSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="add-goal-grid-container">
        <div class="add-goal-title">
            <p>Title: </p>
        </div>
        <div class="add-goal-title-value">
            <InputText id="add-goal-title-input" @bind-Value="_addGoalModel.Title" />
        </div>
        <div class="add-goal-rank">
            <p>Select importance: </p>
        </div>
        <div class="add-goal-rank-value">
            <InputSelect id="add-goal-rank" name="importance" @bind-Value="_addGoalModel.Rank">
                <option value="" selected disabled hidden>Choose rank</option>
                @foreach (var importance in Rank.All)
                {
                    <option value="@importance.Key">@importance.DisplayRank</option>
                }
            </InputSelect>
        </div>
        <div class="add-goal-deadline">
            <p>Select deadline: </p>
        </div>
        <div class="add-goal-deadline-value">
            <InputDate id="add-goal-deadline" @bind-Value="_addGoalModel.Deadline"/>
        </div>
    </div>
    <div class="subtasks">
        <span>Add subtasks</span>
        <div class="add-goal-subtasks-table subgoal-table-2cols">
            @foreach (var subtask in _addGoalModel.Subtasks)
            {
                <div class="subgoal-cell"><InputText @bind-Value="subtask.Title" class="subtask-input"/></div>
                <div class="subgoal-cell"><button type="button" @onclick="() => DeleteSubtask(subtask)">🗙</button></div>
            }
            <div class="subgoal-cell"><input @bind="_newSubtask" class="subtask-input"/></div>
            <div class="subgoal-cell"><button type="button" @onclick="() => AddSubtask(_newSubtask)">+</button></div>
        </div>
    </div>

    <div class="add-goal-submit">
        <button style="float: right;" type="submit">Add Goal</button>
    </div>
</EditForm>

@code {
    [Parameter]
    [Required]
    public EventCallback<Goal> GoalAddedCallback { get; set; }

    private AddGoalModel _addGoalModel = new AddGoalModel();
    private string _newSubtask = string.Empty;

    private async Task HandleSubmitAsync()
    {
        var rank = Rank.Create(_addGoalModel.Rank).Value;
        var subtasks = CreateSubtasksFromModel();
        var goal = Goal.Create(_addGoalModel.Title, rank, GoalStatus.Todo, subtasks, _addGoalModel.Deadline).Value;
        await GoalAddedCallback.InvokeAsync(goal);
        ResetModel();
    }

    private void ResetModel()
    {
        _addGoalModel = new AddGoalModel();
        _newSubtask = string.Empty;
    }

    private void DeleteSubtask(SubtaskModel subtaskModel)
    {
        _addGoalModel.Subtasks.Remove(subtaskModel);
    }

    private void AddSubtask(string subtask)
    {
        var subtaskModel = new SubtaskModel {Title = subtask};
        _addGoalModel.Subtasks.Add(subtaskModel);
        _newSubtask = string.Empty;
    }

    private IEnumerable<Subtask> CreateSubtasksFromModel()
    {
        var nonEmptySubtasks = _addGoalModel.Subtasks.Where(s => !string.IsNullOrEmpty(s.Title));
        return nonEmptySubtasks.Select(s => Subtask.Create(s.Title).Value);
    }
}