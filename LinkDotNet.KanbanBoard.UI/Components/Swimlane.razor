@using LinkDotNet.KanbanBoard.Domain
<style type="text/css">
    .goal-status {
        display: flex;
        justify-content: space-between; 
        flex-direction: column;
        width: 32%;
    }

    .goal-status ul {
        flex: 1;
    }

    .goal-list {
        list-style: none;
        border: 1px dashed grey;
        padding: 30px;
    }

    .goal-item {
        margin-bottom: 10px;
    }

    .can-drop {
        border: 2px dashed green;
    }

    .badge {
        margin-right: 5px;
        border-radius: 50%;
        background: grey;
        color: white;
    }

    .swimlane-header {
        display: flex;
        justify-content: space-between;
        border-radius: 5px;
        margin-bottom: 10px;
        background-color: #479A59;
    }
</style>
<div class="goal-status"
     ondragover="event.preventDefault();"
     ondragstart="event.dataTransfer.setData('', event.target.id);"
     @ondrop="HandleDrop"
     @ondragenter="HandleDragEnter"
     @ondragleave="HandleDragLeave">
    
    <div class="swimlane-header">
        <div class="swimlane-header-text"><span class="badge">@_goals.Count</span><em>@GoalStatus.Key</em></div>
        <div class="swimlane-header-add"></div>
    </div>
    
    <ul class="goal-list @_dropClass">
        @foreach (var goal in _goals)
        {
            <li class="goal-item" draggable="true" @ondragstart="() => HandleGoalItemDragStart(goal)"><TodoTile Goal="goal"></TodoTile></li>
        }
    </ul>
</div>
@code {
    [CascadingParameter]
    private GoalContainer GoalContainer { get; set; }
    [Parameter]
    public GoalStatus GoalStatus { get; set; }

    private List<Goal> _goals = new List<Goal>();

    private string _dropClass = string.Empty;

    protected override void OnParametersSet()
    {
        _goals.Clear();
        _goals.AddRange(GoalContainer.Goals.Where(x => x.GoalStatus == GoalStatus));
    }

    private void HandleDragEnter()
    {
        if (GoalContainer.Payload.GoalStatus == GoalStatus)
        {
            return;
        }

        _dropClass = "can-drop";
    }

    private void HandleDragLeave()
    {
        _dropClass = string.Empty;
    }

    private void HandleDrop()
    {
        _dropClass = string.Empty;
        GoalContainer.UpdateGoalStatus(GoalStatus);
    }

    private void HandleGoalItemDragStart(Goal goal)
    {
        GoalContainer.Payload = goal;
    }
}
