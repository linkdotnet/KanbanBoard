@using Domain
@using System.ComponentModel.DataAnnotations
@using LinkDotNet.KanbanBoard.UI.Features
@inherits BlazorState.BlazorStateComponent
<style type="text/css">
    .tile {
        border-radius: 5px;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
    }

    .tile:hover {
        box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
    }

    .todo-box-content {
        padding: 15px;
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 1fr;
        grid-template-rows: 1fr 1fr 1fr;
        gap: 1px 1px;
        grid-template-areas:
                           "title title title right-box"
                           "title title title right-box"
                           "title title title right-box";
    }

    .title {
        border-radius: 5px;
        background: #FEFFF4;
        word-wrap: break-word;
        grid-area: title;
    }

    .title-content {
        margin: 10px;
    }

    .right-box {
        text-align: center;
        padding-left: 10px;
        grid-area: right-box;
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: repeat(3, minmax(0,1fr));
        gap: 10px 0;
        grid-template-areas:
                           "rank"
                           "subtaskcount"
                           "deadline";
    }

    .overdue {
        color: #ff9966;
    }

    .box {
        background: #9FD0AA;
        border-radius: 7px;
    }

    .transparent-button {
        background-color: Transparent;
        background-repeat:no-repeat;
        border: none;
        cursor:pointer;
        overflow: hidden;
        outline:none;
    }

    .rank { grid-area: rank; }
    .subtaskcount { grid-area: subtaskcount; }
    .deadline { grid-area: deadline; }

    .tile-header {
        height: 32px;
        float: right;
    }

    .tile-subtasks {
        list-style: none;
        padding-left: 15px;
    }

    .tile-subtasks li {
        border-radius: 5px;
        background: #FEFFF4;
        width: 75%;
    }

    .tile-subtasks li p {
        padding-left: 5px;
        margin-bottom: 5px;
    }

    .tile-subtask-container {
        padding-bottom: 5px;
    }
</style>
<div class="tile" style="background-color: @TileColor">
    <div class="tile-header">
        <button class="transparent-button" @onclick="DeleteGoalAsync">
            🗙
        </button>
    </div>
    <div class="tile-content">
        <div class="todo-box-content">
            <div class="title">
                <span class="title-content">@Goal.Title</span>
            </div>

            <div class="right-box">
                <div class="rank box">
                    <p>@Goal.Rank.ShortRank</p>
                </div>
                <div class="subtaskcount box">
                    <p>@Goal.Subtasks.Count()</p>
                </div>
                <div class="deadline box @OverDueClass">
                    <p id="deadline-text">@GetShortDeadline()</p>
                </div>
            </div>
        </div>
        <div class="tile-subtask-container">
            <ul class="tile-subtasks">
                @foreach (var subtask in Goal.Subtasks)
                {
                    <li><p>@subtask.Title</p></li>
                }
            </ul>
        </div>
    </div>
</div>
@code {
    [Required]
    [Parameter]
    public Goal Goal { get; set; }

    private string OverDueClass => Goal.IsOverdue ? "overdue" : string.Empty;

    private string TileColor => Goal.Label?.HexColor ?? "#479A59";

    private string GetShortDeadline()
    {
        if (!Goal.HasDeadline)
        {
            return string.Empty;
        }

        var isCurrentYear = Goal.Deadline.Year == DateTime.Now.Year;
        var year = isCurrentYear ? string.Empty : " yyyy";
        return Goal.Deadline.ToString($"d'.' MMM'.'{year}");
    }

    private async Task DeleteGoalAsync()
    {
        await Mediator.Send(new GoalState.DeleteGoalAction(Goal.Id));
    }
}
    